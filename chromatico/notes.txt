A collection of unused but possibly useful code that was removed from the project, as well as a sort of changeLog reference for the admin. (Me)

What the whole program does currently:
1. User signup functions with authentication
2. When the user signs up they are added to the database and initialized with 2 models- the user with their info and the user's statistics.
3. The signup quiz uses a database model to generate the itinerary of a quiz and then the user is redirected to the start page. The current
authentication for this is to enter their username, but it is not checked by the user-in-session's username, but that of what the user enters. This is
problematic. The signup quiz question generation works pretty well, however it doesn't update the question every time they are redirected to the page.
3. User login/logout functions, each time setting a secure "user id" cookie in session.
5. A homepage different for a logged in user and a logged out user.
6. A resources page with references to what was used in the making of Chromatico.

Read about submitting to CSV file for Python

What the program will do:
1. The logged in user has access to their profile which has options, progress and comment functions. (Like a diary of sorts.)
2. Once the current quiz in the database's total questions has been answered, the user will be redirected to their profile, and the results of the quiz will be pushed
to the progress section of the profile. Then, the user may begin training through quizzes, using the same algorithm as before.
3. Once a level one user reaches 200 points, they may attempt the final exam for level 1.
4. If they pass with a percentage_correct > 87.0 the user levels up.
5. When they pass, they are taken to a games page with an implementation of a fun lil html game. (This is just an added feature, can't guarantee it happening.)
6. When the user reaches 300 points, the page for user quizzes opens up and now they can play other's quizzes.
7. This process continues until they reach level 4, then the page with user quiz creation opens up.
8. Use a module to allow the user to create a quiz on their own.


UNUSED CODE AND THE IDEAS BEHIND THEM:

Using cookies to track how many times a user visited a quiz page

#cookies = self.getVisitCookie()
#counter = int(cookies)
#NOTE: These cookies work, but they're not the best idea for counting how many questions have been completed. Easily hackable because you can't hash an integer.
#if counter > 20:
#    current_user.taken_assess = True
#    self.redirect("/homepage")

#counter += 1

#self.response.headers.add_header('Set-Cookie', "visits=%s" % counter)



CHANGELOG:

9:57 PM 10/30/2016
    ＊　Created the beta test for final project, implemented database models for user signup/login/logout and
    　　two different homepages for a logged in user vs. a logged user/non-existent user.

12:48 PM 11/11/2016
    ＊　Officially started final project
    ＊　Created quiz generation functions

10:00 AM - 4:58 PM 11/12/16
    ＊　Screwed everything up with a structure of circular dependencies for working tree.
    ＊　Researched the physics behind tone comprehension and its relationship with music.
    ＊　Created a resources page for all the references I'm using in the making of this project.
    ＊　Created TODO's for myself in scatter places around the files.
    ＊　Initialized the files on my computer as github repository.
    ＊　Fixed the untracked file problem with /static and /handlers.
    ＊　Created README.md for Github.

9:00 AM - 12:00 PM 11/13/16
    ＊　Fixed the circular dependency problem with new file setup.
    ＊　Tried the cookie method for quizzes.
    ＊　Attempted to fix css.

3:30 PM - 7:45 PM 11/14/16
    ＊　Implemented the page the user redirects to after signup, about to start the quiz.
    ＊　Implemented the structure of quiz functions.
    ＊　Fixed css with help of Joe.
    ＊　Finally got the quizzes' counters to start counting, and the user's submissions to actually be recorded to the "correct" variable.

9:04 AM  - 11/15/2016
    ＊　Fixed the comparison of the answer variable and what the user submitted in the SignupQuizHandler.
